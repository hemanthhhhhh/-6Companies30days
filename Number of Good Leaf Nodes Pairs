class Solution {
    public int countPairs(TreeNode root, int distance) {
        
        Map<TreeNode, List<TreeNode>> adj = new HashMap<>();
        Set<TreeNode> leafNodes = new HashSet<>();

        makeGraph(root, null, adj, leafNodes);

        int count = 0;

        for(TreeNode leaf : leafNodes) {
            Queue<TreeNode> q = new LinkedList<>();
            Set<TreeNode> vis = new HashSet<>();

            q.add(leaf);
            vis.add(leaf);

            for(int i = 0;i <= distance;i++) {
                int size = q.size();
                while(size-- > 0) {
                    TreeNode curr = q.poll();
                    
                    if(curr != leaf && leafNodes.contains(curr)) {
                        count++;
                    }

                    for(TreeNode adjNode : adj.getOrDefault(curr, new ArrayList<>())) {
                        if(!vis.contains(adjNode)) {
                            q.add(adjNode);
                            vis.add(adjNode);
                        }
                    }
                }
            }
        }
        return count / 2; 
    }
    public void makeGraph(TreeNode root, TreeNode prev, Map<TreeNode, List<TreeNode>> adj, Set<TreeNode> set) {

        if(root == null) return;
        if(root.left == null && root.right == null) {
            set.add(root);
        }
        if(prev != null) {
            adj.computeIfAbsent(root, k -> new ArrayList<>()).add(prev);
            adj.computeIfAbsent(prev, k -> new ArrayList<>()).add(root);
        }
        makeGraph(root.left, root, adj, set);
        makeGraph(root.right, root, adj, set);
    }
}
