class Solution {
    class Tuple {
        int first;
        int second;
        int third;

        public Tuple(int first, int second, int third) {
            this.first = first;
            this.second = second;
            this.third = third;
        }
    }
    public int orangesRotting(int[][] grid) {

        int n = grid.length, m = grid[0].length;
        Queue<Tuple> q = new LinkedList<>();
        int vis[][] = new int[n][m];
        int freshCnt = 0, cnt = 0;

        for(int i = 0;i < n;i++) {
            for(int j = 0;j < m;j++) {
                if(grid[i][j] == 2) {
                    q.add(new Tuple(i, j, 0));
                    vis[i][j] = 2;
                }
                if(grid[i][j] == 1) freshCnt++;
            }
        }   
        int delRow[] = {-1, 0, +1, 0};
        int delCol[] = {0, +1, 0, -1};
        int time = 0;

        while(!q.isEmpty()) {
            int row = q.peek().first;
            int col = q.peek().second;
            int steps = q.peek().third;
            q.remove();
            time = steps;

            for(int i = 0;i < 4;i++) {
                int nRow = row + delRow[i];
                int nCol = col + delCol[i];

                if(nRow >= 0 && nCol >= 0 && nRow < n && nCol < m && vis[nRow][nCol] == 0 && grid[nRow][nCol] == 1) {
                    q.add(new Tuple(nRow, nCol, steps + 1));
                    vis[nRow][nCol] = 2;
                    cnt++;
                } 
            }
        }
        if(freshCnt != cnt) return -1;
        return time;
    }
}
