class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {

        int n = nums.length;
        int dp[] = new int[n];
        int hash[] = new int[n];

        for(int i = 0;i < n;i++) {
            dp[i] = 1;
            hash[i] = -1;
        }
        int max = 0, last_ind = 0;
        Arrays.sort(nums);

        for(int i = 1;i < n;i++) {
            for(int j = 0;j < i;j++) {

                if(nums[i] % nums[j] == 0) {
                    if(dp[i] < dp[j] + 1) {
                        dp[i] = dp[j] + 1;
                        hash[i] = j;
                    }
                }
                if(dp[i] > max) {
                    max = dp[i];
                    last_ind = i;
                }
            }
        }
        List<Integer> res = new ArrayList<>();
        while(last_ind != -1) {
            res.add(nums[last_ind]);
            last_ind = hash[last_ind];
        }
        return res;
    }
}
