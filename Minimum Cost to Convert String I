class Solution {
    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
        
        long adjMat[][] = new long[26][26];
        for(long row[] : adjMat) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        floydWarshall(adjMat, original, changed, cost);
        long ans = 0;

        for(int i = 0;i < source.length();i++) {
            int s = source.charAt(i);
            int t = target.charAt(i);

            if(s == t) {
                continue;
            }
            if(adjMat[s - 'a'][t - 'a'] == Integer.MAX_VALUE) {
                return -1;
            }
            else {
                ans += adjMat[s - 'a'][t - 'a'];
            }
        }
        return ans;
    }
    public void floydWarshall(long mat[][], char original[], char[] changed, int cost[]) {

        for(int i = 0;i < original.length;i++) {
            int s = original[i] - 'a';
            int t = changed[i] - 'a';

            mat[s][t] = Math.min(mat[s][t], (long)cost[i]);
        }
        for(int k = 0;k < 26;k++) {
            for(int i = 0;i < 26;i++) {
                for(int j = 0;j < 26;j++) {

                    mat[i][j] = Math.min(mat[i][j], mat[i][k] + mat[k][j]);
                }
            }
        }
    }
}
