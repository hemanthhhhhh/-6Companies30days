class Solution {
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
        
        return solve(0, price, special, needs);
    }
    public int solve(int ind, List<Integer> price, List<List<Integer>> special, List<Integer> needs) {

        int min = directPurchase(needs, price);
        for(int i = ind;i < special.size();i++) {
            List<Integer> offer = special.get(i);
            List<Integer> temp = new ArrayList<>();

            for(int j = 0;j < needs.size();j++) {
                if(needs.get(j) < offer.get(j)) {
                    temp = null;
                    break;
                }
                temp.add(needs.get(j) - offer.get(j));
            }
            if(temp != null) {
                min = Math.min(min, offer.get(offer.size() - 1) + solve(i, price, special, temp));
            }
        }
        return min; 
    }
    public int directPurchase(List<Integer> needs, List<Integer> price) {

        int prices = 0;
        for(int i = 0;i < needs.size();i++) {
            prices += needs.get(i) * price.get(i);
        }
        return prices;
    }
}
