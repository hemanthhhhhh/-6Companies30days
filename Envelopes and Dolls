class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        
        int n = envelopes.length, len = 1;
        Arrays.sort(envelopes, (a, b) -> {
            if (a[0] != b[0]) return a[0] - b[0];
            return b[1] - a[1];
        });
        List<Integer> temp = new ArrayList<>();
        temp.add(envelopes[0][1]);

        for(int i = 1;i < n;i++) {
            if(temp.get(temp.size() - 1) < envelopes[i][1]) {
                temp.add(envelopes[i][1]);
                len++;
            }
            else {
                int ind = lower_bound(temp, envelopes[i][1]);
                if(ind < 0) {
                    ind = -ind - 1;
                }
                temp.set(ind, envelopes[i][1]);
            }
        }
        return len;
    }
    public int lower_bound(List<Integer> arr, int target) {

        int s = 0, e = arr.size() - 1;
        int ind = arr.size();

        while(s <= e) {
            int mid = (s + e) / 2;

            if(arr.get(mid) < target) {
                s = mid + 1;
            }
            else {
                ind = mid;
                e = mid - 1;
            }
        }
        return ind;
    }
}
