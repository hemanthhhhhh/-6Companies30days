class Solution {
    class Pair {
        int first;
        int second;
        public Pair(int _first, int _second) {
            this.first = _first;
            this.second = _second;
        }    
    }
    public int[] maxSubsequence(int[] nums, int k) {
        
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.first - b.first);
        for(int i = 0;i < nums.length;i++) {
            pq.add(new Pair(nums[i], i));
            if(pq.size() > k) {
                pq.poll();
            }
        }
        int j = 0;
        int res[] = new int[k];
        Set<Integer> set = new HashSet<>();

        while(!pq.isEmpty()) {
            set.add(pq.peek().second);
            pq.poll();
        }
        
        for(int i = 0;i < nums.length;i++) {
            if(set.contains(i)) {
                res[j++] = nums[i];
            }
        }
        return res;
    }
}
